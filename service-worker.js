const a=location.pathname.split("/").slice(0,-1).join("/"),u=[a+"/app/immutable/entry/app.Dtaq3wXr.js",a+"/app/immutable/nodes/0.DbTn65Mn.js",a+"/app/immutable/assets/0.C89RsgwJ.css",a+"/app/immutable/nodes/1.BwdPaYGt.js",a+"/app/immutable/nodes/2.BzkREGiq.js",a+"/app/immutable/nodes/3.7Vxx0yg7.js",a+"/app/immutable/nodes/4.BmddbGxb.js",a+"/app/immutable/nodes/5.BH075KBn.js",a+"/app/immutable/assets/5.CV-KWLNP.css",a+"/app/immutable/chunks/BBIdK0y9.js",a+"/app/immutable/chunks/Be2wztuA.js",a+"/app/immutable/chunks/Bgn_WcjM.js",a+"/app/immutable/chunks/Bk60cElj.js",a+"/app/immutable/chunks/Bl0tuSOj.js",a+"/app/immutable/chunks/BuJ3mtbT.js",a+"/app/immutable/chunks/BvZVJFUj.js",a+"/app/immutable/chunks/C3h-0GEQ.js",a+"/app/immutable/chunks/CW7wMxag.js",a+"/app/immutable/chunks/DFYqMPKB.js",a+"/app/immutable/chunks/DHK0DZhv.js",a+"/app/immutable/chunks/DNPn_faI.js",a+"/app/immutable/chunks/DlCaYCUZ.js",a+"/app/immutable/assets/heart.CemoNbBj.css",a+"/app/immutable/chunks/ooZlCatR.js",a+"/app/immutable/chunks/xa89r22M.js",a+"/app/immutable/chunks/xvfATOgL.js",a+"/app/immutable/chunks/yq02yvkd.js",a+"/app/immutable/entry/start.BYhaoNM1.js"],l=[a+"/images/cube.png",a+"/images/favicon.png",a+"/images/icons.png",a+"/images/icons2.png",a+"/images/mail.png",a+"/images/pie.png",a+"/images/pie2.png",a+"/images/profile.png",a+"/images/profit.png",a+"/images/rocket.png",a+"/manifest.json"],o="1746130771937",p=`cache-${o}`,c=[...u,...l];self.addEventListener("install",s=>{async function n(){await(await caches.open(p)).addAll(c)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),i=await caches.open(p);if(c.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(s.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(s.request,e.clone()),e}catch(e){const m=await i.match(s.request);if(m)return m;throw e}}s.respondWith(n())});
