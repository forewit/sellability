const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/app/immutable/entry/app.DwnSlkMK.js",s+"/app/immutable/nodes/0.C440Ph5_.js",s+"/app/immutable/assets/0.Bb860Ihj.css",s+"/app/immutable/nodes/1.Cs98wlsp.js",s+"/app/immutable/nodes/2.BiCq0SYd.js",s+"/app/immutable/nodes/3.BZHuuIg0.js",s+"/app/immutable/nodes/4.AvrRH8Nb.js",s+"/app/immutable/nodes/5.Bze20BFy.js",s+"/app/immutable/assets/5.CV-KWLNP.css",s+"/app/immutable/chunks/BBIdK0y9.js",s+"/app/immutable/chunks/Be2wztuA.js",s+"/app/immutable/chunks/Bk60cElj.js",s+"/app/immutable/chunks/Bl0tuSOj.js",s+"/app/immutable/chunks/BozpRoFe.js",s+"/app/immutable/chunks/BuJ3mtbT.js",s+"/app/immutable/chunks/BvZVJFUj.js",s+"/app/immutable/chunks/C3h-0GEQ.js",s+"/app/immutable/chunks/CEjNKJdl.js",s+"/app/immutable/chunks/DFYqMPKB.js",s+"/app/immutable/chunks/DHK0DZhv.js",s+"/app/immutable/chunks/DlCaYCUZ.js",s+"/app/immutable/chunks/Ds_DSxyb.js",s+"/app/immutable/assets/heart.CemoNbBj.css",s+"/app/immutable/chunks/ooZlCatR.js",s+"/app/immutable/chunks/xa89r22M.js",s+"/app/immutable/chunks/xvfATOgL.js",s+"/app/immutable/chunks/yq02yvkd.js",s+"/app/immutable/entry/start.BiQR0q5s.js"],l=[s+"/images/cube.png",s+"/images/favicon.png",s+"/images/icons.png",s+"/images/icons2.png",s+"/images/mail.png",s+"/images/pie.png",s+"/images/pie2.png",s+"/images/profile.png",s+"/images/profit.png",s+"/images/rocket.png",s+"/manifest.json"],o="1746131427467",p=`cache-${o}`,c=[...u,...l];self.addEventListener("install",a=>{async function n(){await(await caches.open(p)).addAll(c)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),i=await caches.open(p);if(c.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(a.request,e.clone()),e}catch(e){const m=await i.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
