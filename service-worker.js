const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/app/immutable/entry/app.CtvniX6m.js",s+"/app/immutable/nodes/0.YUfhhh8q.js",s+"/app/immutable/assets/0.DBlSPeAE.css",s+"/app/immutable/nodes/1.DmziqP06.js",s+"/app/immutable/nodes/2.DQU9_-tH.js",s+"/app/immutable/nodes/3.D4oix_gO.js",s+"/app/immutable/nodes/4.BXelZa15.js",s+"/app/immutable/nodes/5.DWwwzC5V.js",s+"/app/immutable/chunks/0HW_3G8n.js",s+"/app/immutable/chunks/B2ii8hND.js",s+"/app/immutable/chunks/B58u_f8j.js",s+"/app/immutable/chunks/Bwjv6P6O.js",s+"/app/immutable/chunks/CD6mMYp3.js",s+"/app/immutable/chunks/CvQSKLbg.js",s+"/app/immutable/assets/index.CV-KWLNP.css",s+"/app/immutable/chunks/D2g_w0dS.js",s+"/app/immutable/chunks/DDEubZ-i.js",s+"/app/immutable/chunks/DK1y2Urj.js",s+"/app/immutable/chunks/Daxb3bfP.js",s+"/app/immutable/chunks/DbWY510T.js",s+"/app/immutable/chunks/F2RfalX8.js",s+"/app/immutable/chunks/I8ZKW4cm.js",s+"/app/immutable/chunks/XT1QZa_W.js",s+"/app/immutable/chunks/cSt1H6YZ.js",s+"/app/immutable/chunks/jlWBfZYZ.js",s+"/app/immutable/assets/mode.CemoNbBj.css",s+"/app/immutable/chunks/oDUkZWZk.js",s+"/app/immutable/entry/start.zmsN2QIl.js"],l=[s+"/images/cube.png",s+"/images/favicon.png",s+"/images/icons.png",s+"/images/icons2.png",s+"/images/mail.png",s+"/images/pie.png",s+"/images/pie2.png",s+"/images/profile.png",s+"/images/profit.png",s+"/images/rocket.png",s+"/manifest.json"],o="1746267986031",p=`cache-${o}`,c=[...u,...l];self.addEventListener("install",a=>{async function n(){await(await caches.open(p)).addAll(c)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),i=await caches.open(p);if(c.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(a.request,e.clone()),e}catch(e){const m=await i.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
