const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/app/immutable/entry/app.TuZXLXqR.js",s+"/app/immutable/nodes/0.n2taOyyz.js",s+"/app/immutable/assets/0.DlAiBe0t.css",s+"/app/immutable/nodes/1.BQKN-DR2.js",s+"/app/immutable/nodes/2.BxF_hvWp.js",s+"/app/immutable/nodes/3.D-f3hnqX.js",s+"/app/immutable/nodes/4.PqVWfqdi.js",s+"/app/immutable/nodes/5.BADiPDVr.js",s+"/app/immutable/assets/5.CemoNbBj.css",s+"/app/immutable/chunks/B2hv1C7k.js",s+"/app/immutable/chunks/BSDVZjtN.js",s+"/app/immutable/chunks/BWjVFEjr.js",s+"/app/immutable/assets/index.CV-KWLNP.css",s+"/app/immutable/chunks/BYUf64rJ.js",s+"/app/immutable/chunks/BqTZdbKR.js",s+"/app/immutable/chunks/C7vdJIMn.js",s+"/app/immutable/chunks/CRCkVOzt.js",s+"/app/immutable/chunks/CThfV2uM.js",s+"/app/immutable/chunks/Ce4H2Nz0.js",s+"/app/immutable/chunks/ChYdjqoE.js",s+"/app/immutable/chunks/D2NOc_Gw.js",s+"/app/immutable/chunks/D3bSTrV-.js",s+"/app/immutable/chunks/D7JRbuoo.js",s+"/app/immutable/chunks/D9L-ahDN.js",s+"/app/immutable/chunks/DlkfHlMj.js",s+"/app/immutable/chunks/DrI2jPg7.js",s+"/app/immutable/chunks/MeeaDnBW.js",s+"/app/immutable/chunks/V5fbYSCP.js",s+"/app/immutable/chunks/j2A_FC-c.js",s+"/app/immutable/chunks/rt20xNFg.js",s+"/app/immutable/entry/start.DjVNNa4A.js"],l=[s+"/images/cube.png",s+"/images/favicon.png",s+"/images/icons.png",s+"/images/icons2.png",s+"/images/mail.png",s+"/images/pie.png",s+"/images/pie2.png",s+"/images/profile.png",s+"/images/profit.png",s+"/images/rocket.png",s+"/images/thumbs-up.png",s+"/manifest.json"],o="1747167290353",p=`cache-${o}`,c=[...u,...l];self.addEventListener("install",a=>{async function n(){await(await caches.open(p)).addAll(c)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),i=await caches.open(p);if(c.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(a.request,e.clone()),e}catch(e){const m=await i.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
